version: "3"

services:
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8 
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
  
  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    restart: always
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env

  datanode3:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode3
    restart: always
    volumes:
      - hadoop_datanode3:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    ports:
      - 8088:8088
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 datanode2:9864 datanode3:9864"
    env_file:
      - ./hadoop.env

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 datanode2:9864 datanode3:9864  resourcemanager:8088"
    env_file:
      - ./hadoop.env
  
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 datanode2:9864 datanode3:9864 resourcemanager:8088"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env

  spark-master:
    image: bde2020/spark-master:3.0.0-hadoop3.2
    container_name: spark-master
    depends_on:
      - namenode
      - datanode
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
   
      
  spark-worker-1:
    image: bde2020/spark-worker:3.0.0-hadoop3.2
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000

  javaweather:
    build: JavaWeather/
    container_name: javaweather

  # socketweather:
  #   build: SocketWeather/
  #   container_name: socketweather
  #   ports:
  #     - 9999:9998
  #   depends_on: 
  #     - spark-master
  #   environment:
  #     SERVICE_PRECONDITION: "spark-master:9999"
  #   networks:
  #     - spark_weather

  json-sender:
    build: spark_streaming/
    container_name: json-sender
    depends_on:
      - spark-master
    environment:
      SERVICE_PRECONDITION: "spark-master:9999"


  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper-test
    ports:
      - 2181:2181
    networks:
      - spark_kafka

  kafka:
    image: wurstmeister/kafka
    container_name: kafka-test
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka-test
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-test:2181
    depends_on:
      - zookeeper
    volumes:
      - ./data/kafka:/var/run/docker.sock
    networks:
      - spark_kafka

  # kafka-producer:
  #   build: kafka-producer/
  #   container_name: kafka-producer
  #   depends_on:
  #     - kafka
  #   environment:
  #     SERVICE_PRECONDITION: "kafka-test:9092"
  #   networks:
  #     - spark_kafka

  # kafka-consumer:
  #   build: kafka-consumer/
  #   container_name: kafka-consumer
  #   depends_on:
  #     - kafka
  #   environment:
  #     SERVICE_PRECONDITION: "kafka-test:9092"
  #   networks:
  #     - spark_kafka
  
  # mongo:
  #   container_name: mongo-1
  #   image: mongo
  #   restart: always
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: example
  #   networks:
  #     - spark_kafka

networks:
  spark_kafka:
    driver: bridge
    name: spark_kafka


volumes:
  hadoop_namenode:
  hadoop_datanode:
  hadoop_datanode2:
  hadoop_datanode3:
  hadoop_historyserver:


